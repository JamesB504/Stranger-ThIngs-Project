{"ast":null,"code":"var _jsxFileName = \"/Users/jamesbarnes/Desktop/course_work/Stranger_Things/src/components/NewPostForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { callApi } from \"../api\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst NewPostForm = _ref => {\n  _s();\n\n  let {\n    token,\n    setPosts,\n    posts,\n    action\n  } = _ref;\n  const history = useHistory();\n  const {\n    postId\n  } = useParams();\n  const [newPost, setNewPost] = useState({\n    title: \"\",\n    description: \"\",\n    price: 0,\n    location: \"\",\n    willDeliver: false\n  });\n  const isEdit = action === \"edit\";\n  const title = isEdit ? \"Edit this post\" : \"Add a new post\";\n  const method = isEdit ? \"PATCH\" : \"POST\";\n  const API_URL = isEdit ? `/posts/${postId}` : `/posts`;\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n\n    try {\n      const {\n        data: {\n          post\n        }\n      } = await callApi({\n        url: API_URL,\n        method: method,\n        body: {\n          post: {\n            title: newPost.title,\n            description: newPost.description,\n            price: newPost.price,\n            location: newPost.location,\n            willDeliver: newPost.willDeliver\n          }\n        },\n        token\n      });\n\n      if (isEdit) {\n        //* grab existing posts other than the one ive edited\n        //* add in the post ive edited\n        const filteredPosts = posts.filter(post => post._id !== postId);\n        setPosts([...filteredPosts, post]);\n      } else {\n        //* Otherwise I am creating a post, so just take my old posts and add this new one to the bottom of the list\n        setPosts([...posts, post]);\n      } //* No matter what send users to the /posts page when we are done\n\n\n      history.push(\"/posts\");\n    } catch (error) {\n      console.error(\"error adding a post: \", error);\n    }\n  };\n\n  const handlePostFieldChange = property => event => {\n    if (property === \"willDeliver\") {\n      setNewPost({ ...newPost,\n        [property]: event.target.checked\n      });\n    } else {\n      setNewPost({ ...newPost,\n        [property]: event.target.value\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"title\",\n        onChange: handlePostFieldChange(\"title\"),\n        value: newPost.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"description\",\n        onChange: handlePostFieldChange(\"description\"),\n        value: newPost.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"price\",\n        onChange: handlePostFieldChange(\"price\"),\n        value: newPost.price\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"location\",\n        onChange: handlePostFieldChange(\"location\"),\n        value: newPost.location\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Deliver ?\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          onChange: handlePostFieldChange(\"willDeliver\"),\n          value: newPost.willDeliver\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(NewPostForm, \"u2ogRyO8RMtDNUF7N/YeCr4J9Cc=\", false, function () {\n  return [useHistory, useParams];\n});\n\n_c = NewPostForm;\nexport default NewPostForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewPostForm\");","map":{"version":3,"sources":["/Users/jamesbarnes/Desktop/course_work/Stranger_Things/src/components/NewPostForm.js"],"names":["React","useState","callApi","useHistory","useParams","NewPostForm","token","setPosts","posts","action","history","postId","newPost","setNewPost","title","description","price","location","willDeliver","isEdit","method","API_URL","handleSubmit","event","preventDefault","data","post","url","body","filteredPosts","filter","_id","push","error","console","handlePostFieldChange","property","target","checked","value"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { callApi } from \"../api\";\nimport { useHistory, useParams } from \"react-router-dom\";\n\nconst NewPostForm = ({ token, setPosts, posts, action }) => {\n  const history = useHistory();\n  const { postId } = useParams();\n\n  const [newPost, setNewPost] = useState({\n    title: \"\",\n    description: \"\",\n    price: 0,\n    location: \"\",\n    willDeliver: false,\n  });\n  const isEdit = action === \"edit\";\n  const title = isEdit ? \"Edit this post\" : \"Add a new post\";\n  const method = isEdit ? \"PATCH\" : \"POST\";\n  const API_URL = isEdit ? `/posts/${postId}` : `/posts`;\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      const {\n        data: { post },\n      } = await callApi({\n        url: API_URL,\n        method: method,\n        body: {\n          post: {\n            title: newPost.title,\n            description: newPost.description,\n            price: newPost.price,\n            location: newPost.location,\n            willDeliver: newPost.willDeliver,\n          },\n        },\n        token,\n      });\n\n      if (isEdit) {\n        //* grab existing posts other than the one ive edited\n        //* add in the post ive edited\n        const filteredPosts = posts.filter((post) => post._id !== postId);\n        setPosts([...filteredPosts, post]);\n      } else {\n        //* Otherwise I am creating a post, so just take my old posts and add this new one to the bottom of the list\n        setPosts([...posts, post]);\n      }\n      //* No matter what send users to the /posts page when we are done\n      history.push(\"/posts\");\n    } catch (error) {\n      console.error(\"error adding a post: \", error);\n    }\n  };\n\n  const handlePostFieldChange = (property) => (event) => {\n    if (property === \"willDeliver\") {\n      setNewPost({ ...newPost, [property]: event.target.checked });\n    } else {\n      setNewPost({ ...newPost, [property]: event.target.value });\n    }\n  };\n\n  return (\n    <>\n      <h2>{title}</h2>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          placeholder=\"title\"\n          onChange={handlePostFieldChange(\"title\")}\n          value={newPost.title}\n        ></input>\n        <input\n          type=\"text\"\n          placeholder=\"description\"\n          onChange={handlePostFieldChange(\"description\")}\n          value={newPost.description}\n        ></input>\n        <input\n          type=\"number\"\n          placeholder=\"price\"\n          onChange={handlePostFieldChange(\"price\")}\n          value={newPost.price}\n        ></input>\n        <input\n          type=\"text\"\n          placeholder=\"location\"\n          onChange={handlePostFieldChange(\"location\")}\n          value={newPost.location}\n        ></input>\n        <label>\n          Deliver ?\n          <input\n            type=\"checkbox\"\n            onChange={handlePostFieldChange(\"willDeliver\")}\n            value={newPost.willDeliver}\n          ></input>\n        </label>\n        <button>{title}</button>\n      </form>\n    </>\n  );\n};\n\nexport default NewPostForm;\n"]},"metadata":{},"sourceType":"module"}