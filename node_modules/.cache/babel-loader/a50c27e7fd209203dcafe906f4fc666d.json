{"ast":null,"code":"import _defineProperty from\"/Users/jamesbarnes/Desktop/course_work/Stranger_Things/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/Users/jamesbarnes/Desktop/course_work/Stranger_Things/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _regeneratorRuntime from\"/Users/jamesbarnes/Desktop/course_work/Stranger_Things/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _toConsumableArray from\"/Users/jamesbarnes/Desktop/course_work/Stranger_Things/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _asyncToGenerator from\"/Users/jamesbarnes/Desktop/course_work/Stranger_Things/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/jamesbarnes/Desktop/course_work/Stranger_Things/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from\"react\";import{callApi}from\"../api\";import{useHistory,useParams}from\"react-router-dom\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var NewPostForm=function NewPostForm(_ref){var token=_ref.token,setPosts=_ref.setPosts,posts=_ref.posts,action=_ref.action;var history=useHistory();var _useParams=useParams(),postId=_useParams.postId;var _useState=useState({title:\"\",description:\"\",price:0,location:\"\",willDeliver:false}),_useState2=_slicedToArray(_useState,2),newPost=_useState2[0],setNewPost=_useState2[1];var isEdit=action===\"edit\";var title=isEdit?\"Edit this post\":\"Add a new post\";var method=isEdit?\"PATCH\":\"POST\";var API_URL=isEdit?\"/posts/\".concat(postId):\"/posts\";var handleSubmit=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(event){var _yield$callApi,post,filteredPosts;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:event.preventDefault();_context.prev=1;_context.next=4;return callApi({url:API_URL,method:method,body:{post:{title:newPost.title,description:newPost.description,price:newPost.price,location:newPost.location,willDeliver:newPost.willDeliver}},token:token});case 4:_yield$callApi=_context.sent;post=_yield$callApi.data.post;if(isEdit){//* grab existing posts other than the one ive edited\n//* add in the post ive edited\nfilteredPosts=posts.filter(function(post){return post._id!==postId;});setPosts([].concat(_toConsumableArray(filteredPosts),[post]));}else{//* Otherwise I am creating a post, so just take my old posts and add this new one to the bottom of the list\nsetPosts([].concat(_toConsumableArray(posts),[post]));}//* No matter what send users to the /posts page when we are done\nhistory.push(\"/posts\");_context.next=13;break;case 10:_context.prev=10;_context.t0=_context[\"catch\"](1);console.error(\"error adding a post: \",_context.t0);case 13:case\"end\":return _context.stop();}}},_callee,null,[[1,10]]);}));return function handleSubmit(_x){return _ref2.apply(this,arguments);};}();var handlePostFieldChange=function handlePostFieldChange(property){return function(event){if(property===\"willDeliver\"){setNewPost(_objectSpread(_objectSpread({},newPost),{},_defineProperty({},property,event.target.checked)));}else{setNewPost(_objectSpread(_objectSpread({},newPost),{},_defineProperty({},property,event.target.value)));}};};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"h2\",{children:title}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"title\",onChange:handlePostFieldChange(\"title\"),value:newPost.title}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"description\",onChange:handlePostFieldChange(\"description\"),value:newPost.description}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",placeholder:\"price\",onChange:handlePostFieldChange(\"price\"),value:newPost.price}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"location\",onChange:handlePostFieldChange(\"location\"),value:newPost.location}),/*#__PURE__*/_jsxs(\"label\",{children:[\"Deliver ?\",/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",onChange:handlePostFieldChange(\"willDeliver\"),value:newPost.willDeliver})]}),/*#__PURE__*/_jsx(\"button\",{children:title})]})]});};export default NewPostForm;","map":{"version":3,"sources":["/Users/jamesbarnes/Desktop/course_work/Stranger_Things/src/components/NewPostForm.js"],"names":["React","useState","callApi","useHistory","useParams","NewPostForm","token","setPosts","posts","action","history","postId","title","description","price","location","willDeliver","newPost","setNewPost","isEdit","method","API_URL","handleSubmit","event","preventDefault","url","body","post","data","filteredPosts","filter","_id","push","console","error","handlePostFieldChange","property","target","checked","value"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { callApi } from \"../api\";\nimport { useHistory, useParams } from \"react-router-dom\";\n\nconst NewPostForm = ({ token, setPosts, posts, action }) => {\n  const history = useHistory();\n  const { postId } = useParams();\n\n  const [newPost, setNewPost] = useState({\n    title: \"\",\n    description: \"\",\n    price: 0,\n    location: \"\",\n    willDeliver: false,\n  });\n  const isEdit = action === \"edit\";\n  const title = isEdit ? \"Edit this post\" : \"Add a new post\";\n  const method = isEdit ? \"PATCH\" : \"POST\";\n  const API_URL = isEdit ? `/posts/${postId}` : `/posts`;\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      const {\n        data: { post },\n      } = await callApi({\n        url: API_URL,\n        method: method,\n        body: {\n          post: {\n            title: newPost.title,\n            description: newPost.description,\n            price: newPost.price,\n            location: newPost.location,\n            willDeliver: newPost.willDeliver,\n          },\n        },\n        token,\n      });\n\n      if (isEdit) {\n        //* grab existing posts other than the one ive edited\n        //* add in the post ive edited\n        const filteredPosts = posts.filter((post) => post._id !== postId);\n        setPosts([...filteredPosts, post]);\n      } else {\n        //* Otherwise I am creating a post, so just take my old posts and add this new one to the bottom of the list\n        setPosts([...posts, post]);\n      }\n      //* No matter what send users to the /posts page when we are done\n      history.push(\"/posts\");\n    } catch (error) {\n      console.error(\"error adding a post: \", error);\n    }\n  };\n\n  const handlePostFieldChange = (property) => (event) => {\n    if (property === \"willDeliver\") {\n      setNewPost({ ...newPost, [property]: event.target.checked });\n    } else {\n      setNewPost({ ...newPost, [property]: event.target.value });\n    }\n  };\n\n  return (\n    <>\n      <h2>{title}</h2>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          placeholder=\"title\"\n          onChange={handlePostFieldChange(\"title\")}\n          value={newPost.title}\n        ></input>\n        <input\n          type=\"text\"\n          placeholder=\"description\"\n          onChange={handlePostFieldChange(\"description\")}\n          value={newPost.description}\n        ></input>\n        <input\n          type=\"number\"\n          placeholder=\"price\"\n          onChange={handlePostFieldChange(\"price\")}\n          value={newPost.price}\n        ></input>\n        <input\n          type=\"text\"\n          placeholder=\"location\"\n          onChange={handlePostFieldChange(\"location\")}\n          value={newPost.location}\n        ></input>\n        <label>\n          Deliver ?\n          <input\n            type=\"checkbox\"\n            onChange={handlePostFieldChange(\"willDeliver\")}\n            value={newPost.willDeliver}\n          ></input>\n        </label>\n        <button>{title}</button>\n      </form>\n    </>\n  );\n};\n\nexport default NewPostForm;\n"]},"metadata":{},"sourceType":"module"}